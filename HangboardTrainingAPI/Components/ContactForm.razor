@using MyBoardsAPI.Models
@inject NavigationManager Navigator
@inject IJSRuntime JSRuntime
@using System.ComponentModel

@if (!isSubmited)
{
   
}
else
{
    <div>
        <h1>Thank you for getting in touch!</h1>
        <p>I'll be with you shortly.</p>
        <button @onclick="ReturnToForm">Submit Another</button>
    </div>
}

@code {


    private readonly Email email = new();

    static readonly HttpClient client = new();

    private bool isSubmited;

    private string errorMessage = string.Empty;
    
    private string captchaResponse;
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                await JSRuntime.InvokeAsync<int>(
                    "googleRecaptcha",
                    DotNetObjectReference.Create(this),
                    "google_recaptcha ",
                    "6LcOkggiAAAAAIs14YDlLbAoVBjMLFYBQiJ8kEsU");
            }
            await base.OnAfterRenderAsync(firstRender);
        }
        catch (Exception ex)
        {
            
        }
        
       
    }
    
    [JSInvokable,   EditorBrowsable(EditorBrowsableState.Never)]
    public void CallbackOnSuccess(string response)
    {
        captchaResponse =   response;
    }
    
    [JSInvokable,   EditorBrowsable(EditorBrowsableState.Never)]
    public void CallbackOnExpired(string response)
    {
    //...
    }
    
    private void ShowResponse()
    {
        captchaResponse = $"The response for the Google reCAPTCHA widget: {captchaResponse}";
    }

    private void ReturnToForm()
    {
        isSubmited = false;
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            await client.PostAsJsonAsync(
                $"{Navigator.BaseUri}api/Contact", email);
        }
        catch
        {
            errorMessage = "There was an error submitting. Please try again!";
            return;
        }

        isSubmited = true;
    }
}

